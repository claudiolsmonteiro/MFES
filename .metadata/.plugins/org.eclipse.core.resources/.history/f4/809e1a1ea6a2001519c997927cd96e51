class Board
/*
	Classe relativa ao tabuleiro
*/
types
/*
	Definicao do tipo de peca possivel.
*/
	public Type = <Space> | <Black> | <White>;
values
instance variables
	public board : map seq of nat to Type := {|->};
operations


public Board: () ==> Board
	Board () == (
		board := {
			[0,0] |-> <White>, [0,1] |-> <Black>, [0,2] |-> <Black>,[0,3] |-> <Black>, [0,4] |-> <Black>, [0,5] |-> <Black>,[0,6] |-> <Black>, [0,7] |-> <Black>, 
			[1,0] |-> <White>,[1,1] |-> <Space>, [1,2] |-> <Space>, [1,3] |-> <Space>,[1,4] |-> <Space>, [1,5] |-> <Space>, [1,6] |-> <Space>,[1,7] |-> <Black>, 
			[2,0] |-> <White>, [2,1] |-> <Space>,[2,2] |-> <Space>, [2,3] |-> <Space>, [2,4] |-> <Space>,[2,5] |-> <Space>, [2,6] |-> <Space>, [2,7] |-> <Black>,
			[3,0] |-> <White>, [3,1] |-> <Space>, [3,2] |-> <Space>,[3,3] |-> <Space>, [3,4] |-> <Space>, [3,5] |-> <Space>,[3,6] |-> <Space>, [3,7] |-> <Black>, 
			[4,0] |-> <White>,[4,1] |-> <Space>, [4,2] |-> <Space>, [4,3] |-> <Space>,[4,4] |-> <Space>, [4,5] |-> <Space>, [4,6] |-> <Space>,[4,7] |-> <Black>, 
			[5,0] |-> <White>, [5,1] |-> <Space>,[5,2] |-> <Space>, [5,3] |-> <Space>, [5,4] |-> <Space>,[5,5] |-> <Space>, [5,6] |-> <Space>, [5,7] |-> <Black>,
			[6,0] |-> <White>, [6,1] |-> <Space>, [6,2] |-> <Space>,[6,3] |-> <Space>, [6,4] |-> <Space>, [6,5] |-> <Space>,[6,6] |-> <Space>, [6,7] |-> <Black>, 
			[7,0] |-> <White>,[7,1] |-> <White>, [7,2] |-> <White>, [7,3] |-> <White>,[7,4] |-> <White>, [7,5] |-> <White>, [7,6] |-> <White>,[7,7] |-> <Black>
		};
	);
	public pure getBoard : () ==> map seq of nat to Type
  getBoard() ==
  (
    return board;
  );
  public setBoard : map seq of nat to Type ==> () 
  setBoard(Board) == 
  (
  	board := Board;
  );
  public pure movepossible : seq of nat ==> bool
  movepossible(array) ==
  (
  	if board(array) = <Space>
  		then return true
  	else return false;
  );
  
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here
end Board